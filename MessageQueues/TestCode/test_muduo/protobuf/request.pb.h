// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto;
namespace HQJ {
class add_request;
struct add_requestDefaultTypeInternal;
extern add_requestDefaultTypeInternal _add_request_default_instance_;
class add_respond;
struct add_respondDefaultTypeInternal;
extern add_respondDefaultTypeInternal _add_respond_default_instance_;
class tanslate_request;
struct tanslate_requestDefaultTypeInternal;
extern tanslate_requestDefaultTypeInternal _tanslate_request_default_instance_;
class tanslate_respond;
struct tanslate_respondDefaultTypeInternal;
extern tanslate_respondDefaultTypeInternal _tanslate_respond_default_instance_;
}  // namespace HQJ
PROTOBUF_NAMESPACE_OPEN
template<> ::HQJ::add_request* Arena::CreateMaybeMessage<::HQJ::add_request>(Arena*);
template<> ::HQJ::add_respond* Arena::CreateMaybeMessage<::HQJ::add_respond>(Arena*);
template<> ::HQJ::tanslate_request* Arena::CreateMaybeMessage<::HQJ::tanslate_request>(Arena*);
template<> ::HQJ::tanslate_respond* Arena::CreateMaybeMessage<::HQJ::tanslate_respond>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HQJ {

// ===================================================================

class tanslate_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HQJ.tanslate_request) */ {
 public:
  inline tanslate_request() : tanslate_request(nullptr) {}
  ~tanslate_request() override;
  explicit PROTOBUF_CONSTEXPR tanslate_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tanslate_request(const tanslate_request& from);
  tanslate_request(tanslate_request&& from) noexcept
    : tanslate_request() {
    *this = ::std::move(from);
  }

  inline tanslate_request& operator=(const tanslate_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline tanslate_request& operator=(tanslate_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tanslate_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const tanslate_request* internal_default_instance() {
    return reinterpret_cast<const tanslate_request*>(
               &_tanslate_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(tanslate_request& a, tanslate_request& b) {
    a.Swap(&b);
  }
  inline void Swap(tanslate_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tanslate_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tanslate_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tanslate_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tanslate_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tanslate_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tanslate_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HQJ.tanslate_request";
  }
  protected:
  explicit tanslate_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
  };
  // string word = 1;
  void clear_word();
  const std::string& word() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_word(ArgT0&& arg0, ArgT... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // @@protoc_insertion_point(class_scope:HQJ.tanslate_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class tanslate_respond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HQJ.tanslate_respond) */ {
 public:
  inline tanslate_respond() : tanslate_respond(nullptr) {}
  ~tanslate_respond() override;
  explicit PROTOBUF_CONSTEXPR tanslate_respond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tanslate_respond(const tanslate_respond& from);
  tanslate_respond(tanslate_respond&& from) noexcept
    : tanslate_respond() {
    *this = ::std::move(from);
  }

  inline tanslate_respond& operator=(const tanslate_respond& from) {
    CopyFrom(from);
    return *this;
  }
  inline tanslate_respond& operator=(tanslate_respond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tanslate_respond& default_instance() {
    return *internal_default_instance();
  }
  static inline const tanslate_respond* internal_default_instance() {
    return reinterpret_cast<const tanslate_respond*>(
               &_tanslate_respond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(tanslate_respond& a, tanslate_respond& b) {
    a.Swap(&b);
  }
  inline void Swap(tanslate_respond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tanslate_respond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tanslate_respond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tanslate_respond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tanslate_respond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tanslate_respond& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tanslate_respond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HQJ.tanslate_respond";
  }
  protected:
  explicit tanslate_respond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
  };
  // string word = 1;
  void clear_word();
  const std::string& word() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_word(ArgT0&& arg0, ArgT... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* word);
  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(const std::string& value);
  std::string* _internal_mutable_word();
  public:

  // @@protoc_insertion_point(class_scope:HQJ.tanslate_respond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class add_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HQJ.add_request) */ {
 public:
  inline add_request() : add_request(nullptr) {}
  ~add_request() override;
  explicit PROTOBUF_CONSTEXPR add_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  add_request(const add_request& from);
  add_request(add_request&& from) noexcept
    : add_request() {
    *this = ::std::move(from);
  }

  inline add_request& operator=(const add_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_request& operator=(add_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const add_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const add_request* internal_default_instance() {
    return reinterpret_cast<const add_request*>(
               &_add_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(add_request& a, add_request& b) {
    a.Swap(&b);
  }
  inline void Swap(add_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  add_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<add_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const add_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const add_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HQJ.add_request";
  }
  protected:
  explicit add_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // uint64 a = 1;
  void clear_a();
  uint64_t a() const;
  void set_a(uint64_t value);
  private:
  uint64_t _internal_a() const;
  void _internal_set_a(uint64_t value);
  public:

  // uint64 b = 2;
  void clear_b();
  uint64_t b() const;
  void set_b(uint64_t value);
  private:
  uint64_t _internal_b() const;
  void _internal_set_b(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:HQJ.add_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t a_;
  uint64_t b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class add_respond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HQJ.add_respond) */ {
 public:
  inline add_respond() : add_respond(nullptr) {}
  ~add_respond() override;
  explicit PROTOBUF_CONSTEXPR add_respond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  add_respond(const add_respond& from);
  add_respond(add_respond&& from) noexcept
    : add_respond() {
    *this = ::std::move(from);
  }

  inline add_respond& operator=(const add_respond& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_respond& operator=(add_respond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const add_respond& default_instance() {
    return *internal_default_instance();
  }
  static inline const add_respond* internal_default_instance() {
    return reinterpret_cast<const add_respond*>(
               &_add_respond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(add_respond& a, add_respond& b) {
    a.Swap(&b);
  }
  inline void Swap(add_respond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_respond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  add_respond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<add_respond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const add_respond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const add_respond& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_respond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HQJ.add_respond";
  }
  protected:
  explicit add_respond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint64 result = 1;
  void clear_result();
  uint64_t result() const;
  void set_result(uint64_t value);
  private:
  uint64_t _internal_result() const;
  void _internal_set_result(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:HQJ.add_respond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tanslate_request

// string word = 1;
inline void tanslate_request::clear_word() {
  word_.ClearToEmpty();
}
inline const std::string& tanslate_request::word() const {
  // @@protoc_insertion_point(field_get:HQJ.tanslate_request.word)
  return _internal_word();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void tanslate_request::set_word(ArgT0&& arg0, ArgT... args) {
 
 word_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HQJ.tanslate_request.word)
}
inline std::string* tanslate_request::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:HQJ.tanslate_request.word)
  return _s;
}
inline const std::string& tanslate_request::_internal_word() const {
  return word_.Get();
}
inline void tanslate_request::_internal_set_word(const std::string& value) {
  
  word_.Set(value, GetArenaForAllocation());
}
inline std::string* tanslate_request::_internal_mutable_word() {
  
  return word_.Mutable(GetArenaForAllocation());
}
inline std::string* tanslate_request::release_word() {
  // @@protoc_insertion_point(field_release:HQJ.tanslate_request.word)
  return word_.Release();
}
inline void tanslate_request::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  word_.SetAllocated(word, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (word_.IsDefault()) {
    word_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HQJ.tanslate_request.word)
}

// -------------------------------------------------------------------

// tanslate_respond

// string word = 1;
inline void tanslate_respond::clear_word() {
  word_.ClearToEmpty();
}
inline const std::string& tanslate_respond::word() const {
  // @@protoc_insertion_point(field_get:HQJ.tanslate_respond.word)
  return _internal_word();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void tanslate_respond::set_word(ArgT0&& arg0, ArgT... args) {
 
 word_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HQJ.tanslate_respond.word)
}
inline std::string* tanslate_respond::mutable_word() {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:HQJ.tanslate_respond.word)
  return _s;
}
inline const std::string& tanslate_respond::_internal_word() const {
  return word_.Get();
}
inline void tanslate_respond::_internal_set_word(const std::string& value) {
  
  word_.Set(value, GetArenaForAllocation());
}
inline std::string* tanslate_respond::_internal_mutable_word() {
  
  return word_.Mutable(GetArenaForAllocation());
}
inline std::string* tanslate_respond::release_word() {
  // @@protoc_insertion_point(field_release:HQJ.tanslate_respond.word)
  return word_.Release();
}
inline void tanslate_respond::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    
  } else {
    
  }
  word_.SetAllocated(word, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (word_.IsDefault()) {
    word_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HQJ.tanslate_respond.word)
}

// -------------------------------------------------------------------

// add_request

// uint64 a = 1;
inline void add_request::clear_a() {
  a_ = uint64_t{0u};
}
inline uint64_t add_request::_internal_a() const {
  return a_;
}
inline uint64_t add_request::a() const {
  // @@protoc_insertion_point(field_get:HQJ.add_request.a)
  return _internal_a();
}
inline void add_request::_internal_set_a(uint64_t value) {
  
  a_ = value;
}
inline void add_request::set_a(uint64_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:HQJ.add_request.a)
}

// uint64 b = 2;
inline void add_request::clear_b() {
  b_ = uint64_t{0u};
}
inline uint64_t add_request::_internal_b() const {
  return b_;
}
inline uint64_t add_request::b() const {
  // @@protoc_insertion_point(field_get:HQJ.add_request.b)
  return _internal_b();
}
inline void add_request::_internal_set_b(uint64_t value) {
  
  b_ = value;
}
inline void add_request::set_b(uint64_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:HQJ.add_request.b)
}

// -------------------------------------------------------------------

// add_respond

// uint64 result = 1;
inline void add_respond::clear_result() {
  result_ = uint64_t{0u};
}
inline uint64_t add_respond::_internal_result() const {
  return result_;
}
inline uint64_t add_respond::result() const {
  // @@protoc_insertion_point(field_get:HQJ.add_respond.result)
  return _internal_result();
}
inline void add_respond::_internal_set_result(uint64_t value) {
  
  result_ = value;
}
inline void add_respond::set_result(uint64_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:HQJ.add_respond.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HQJ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
